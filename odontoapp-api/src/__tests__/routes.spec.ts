import {
  describe,
  beforeEach,
  afterEach,
  it,
  expect,
  beforeAll,
  afterAll,
} from 'vitest';
import request from 'supertest';
import express from 'express';
import Server from '@/server';
import { Server as HTTPServer } from 'http';
import bcrypt from 'bcrypt';
import config from '@/etc/config';
import prisma from '@/db';
import { Users } from '@prisma/client';

const app = express();
const server = new Server({ app, port: 4444 });
let myAppInstance: HTTPServer | null = null;
let testDBUser: Users;

describe('/users', () => {
  beforeAll(async () => {
    const encriptedPassword = await bcrypt.hash('123123', config.hash.salt);

    testDBUser = await prisma.users.create({
      data: {
        name: 'John Doe',
        email: 'john.doe@email.com',
        // generated by http://www.jmssolucoes.com.br/gerador-de-cpf-cnpj.aspx
        cpf_cnpj: '13368116177',
        // password: '123123',
        password: encriptedPassword,
        role: 'DENTIST',
      },
    });
  });

  afterAll(async () => {
    await prisma.users.deleteMany({});
    await prisma.$disconnect();
  });

  beforeEach(async () => {
    myAppInstance = await server.init();
  });

  afterEach(() => {
    server.close();
  });

  const acceptableUserData = {
    name: 'John Doe',
    email: 'john.doe@email.com',
    // generated by http://www.jmssolucoes.com.br/gerador-de-cpf-cnpj.aspx
    cpf_cnpj: '13368116177',
    password: '123123',
    confirm_password: '123123',
    account_type: 1,
  };

  describe('/users :: POST', () => {
    it('should return 400 and error message when one or more required fields are not sent', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({ name: 'John Doe' });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({ message: 'All fields required.' });
    });

    it('should return 400 and error message when password is different than confirm_password', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({ ...acceptableUserData, confirm_password: '123456' });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'Password/Confirm password must match.',
      });
    });

    it('should return 400 and error message when account_type is lower than 1 or higher than 2', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({ ...acceptableUserData, account_type: 5 });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'Invalid account type.',
      });
    });

    it('should return 400 and error message when cpf_cnpj is invalid', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({ ...acceptableUserData, cpf_cnpj: '123123123' });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'Invalid CPF/CNPJ.',
      });
    });

    it('should return 400 and error message when email is invalid', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({ ...acceptableUserData, email: 'john.doe@' });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'Invalid e-mail.',
      });
    });

    it('should return 400 and error message when CPF/CPNJ is already used', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({ ...acceptableUserData, cpf_cnpj: testDBUser.cpf_cnpj });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'CPF/CNPJ already used.',
      });
    });

    it('should return 400 and error message when email is already used', async () => {
      const response = await request(myAppInstance)
        .post('/users')
        .send({
          ...acceptableUserData,
          // generated by http://www.jmssolucoes.com.br/gerador-de-cpf-cnpj.aspx
          cpf_cnpj: '52878401000142',
          email: testDBUser.email,
        });

      expect(response.statusCode).toEqual(400);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'E-mail already used.',
      });
    });

    it("should return 201 and 'ok' mesasge when all input data is correct", async () => {
      const response = await request(myAppInstance).post('/users').send({
        name: 'Jane Doe',
        email: 'jane.doe@email.com',
        // generated by http://www.jmssolucoes.com.br/gerador-de-cpf-cnpj.aspx
        cpf_cnpj: '42787516000178',
        password: '123123',
        confirm_password: '123123',
        account_type: 1,
      });

      const data = response.body.data;

      expect(response.statusCode).toEqual(201);
      expect(response.headers['content-type']).toMatch(/json/);
      expect(response.body).toEqual({
        message: 'ok',
        data: {
          ...data,
        },
      });
    });
  });
});
